-- Lama.cf

Prog. Program ::= [Stm] ;

terminator Stm "" ;

SExp.       Stm ::= Exp ";" ;
SDecl.      Stm ::= Type Ident ";"  ;
SAss.       Stm ::= Ident "=" Exp ";" ;
SInit.      Stm ::= Type Ident "=" Exp ";" ;
SPrint.     Stm ::= "print" Exp  ";" ;
SWhile.     Stm ::= "while" "(" Exp ")" Stm ;
SBlock.     Stm ::= "{" [Stm] "}" ;
SIfElse.    Stm ::= "if" "(" Exp ")" Stm "else" Stm ;

EVar.       Exp12  ::= Ident ;
EInt.       Exp12  ::= Integer ;
EDouble.    Exp12  ::= Double ;
EBool.      Exp12  ::= Bool ;
EPostIncr.  Exp11  ::= Ident "++" ;
EPostDecr.  Exp11  ::= Ident "--" ;
EPreIncr.   Exp10  ::= "++" Ident ;
EPreDecr.   Exp10  ::= "--" Ident ;
EMul.       Exp9  ::= Exp9 "*" Exp10 ;
EDiv.       Exp9  ::= Exp9 "/" Exp10 ;
EAdd.       Exp8  ::= Exp8 "+" Exp9 ;
ESub.       Exp8  ::= Exp8 "-" Exp9 ;
ELess.      Exp6  ::= Exp7 "<"  Exp7 ;
EGreater.   Exp6  ::= Exp7 ">"  Exp7 ;
ELEq.       Exp6  ::= Exp7 "<=" Exp7 ;
EGEq.       Exp6  ::= Exp7 ">=" Exp7 ;
EEq.        Exp5  ::= Exp6 "==" Exp6 ;
ENEq.       Exp5  ::= Exp6 "!=" Exp6 ;
EAnd.       Exp3  ::= Exp3 "&&" Exp4 ;
EOr.        Exp2  ::= Exp2 "||" Exp3 ;
Array.      Exp   ::= "[" Type "]" "[" [Exp] "]" ;

separator Exp "," ;

rules Bool ::= "true" | "false";

coercions Exp 12 ;

TInt.    Type1 ::= "int" ;
TDouble. Type1 ::= "double" ;
TBool.   Type1 ::= "bool" ;
TArray.  Type ::= "[" Type "]" ;

coercions Type 1 ;