// -*- Java -*- File generated by the BNF Converter (bnfc 2.9.4).

// Parser definition for use with Java Cup
package lama;

action code {:
public java_cup.runtime.ComplexSymbolFactory.Location getLeftLocation(
    java_cup.runtime.ComplexSymbolFactory.Location ... locations) {
  for (java_cup.runtime.ComplexSymbolFactory.Location l : locations) {
    if (l != null) {
      return l;
    }
  }
  return null;
}
:}
parser code {:
  public lama.Absyn.Program pProgram() throws Exception
  {
    java_cup.runtime.Symbol res = parse();
    return (lama.Absyn.Program) res.value;
  }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
  report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
  throw new Exception("Unrecoverable Syntax Error");
}

:}

nonterminal lama.Absyn.Program Program;
nonterminal lama.Absyn.ListStm ListStm;
nonterminal lama.Absyn.Stm Stm;
nonterminal lama.Absyn.Exp Exp8;
nonterminal lama.Absyn.Exp Exp7;
nonterminal lama.Absyn.Exp Exp6;
nonterminal lama.Absyn.Exp Exp5;
nonterminal lama.Absyn.Exp Exp4;
nonterminal lama.Absyn.Exp Exp2;
nonterminal lama.Absyn.Exp Exp1;
nonterminal lama.Absyn.Bool Bool;
nonterminal lama.Absyn.Exp Exp;
nonterminal lama.Absyn.Exp Exp3;
nonterminal lama.Absyn.Type Type;

terminal _SYMB_0;    //   ;
terminal _SYMB_1;    //   =
terminal _SYMB_2;    //   {
terminal _SYMB_3;    //   }
terminal _SYMB_4;    //   ++
terminal _SYMB_5;    //   --
terminal _SYMB_6;    //   *
terminal _SYMB_7;    //   /
terminal _SYMB_8;    //   +
terminal _SYMB_9;    //   -
terminal _SYMB_10;    //   <
terminal _SYMB_11;    //   >
terminal _SYMB_12;    //   <=
terminal _SYMB_13;    //   >=
terminal _SYMB_14;    //   ==
terminal _SYMB_15;    //   !=
terminal _SYMB_16;    //   (
terminal _SYMB_17;    //   )
terminal _SYMB_18;    //   bool
terminal _SYMB_19;    //   double
terminal _SYMB_20;    //   false
terminal _SYMB_21;    //   int
terminal _SYMB_22;    //   print
terminal _SYMB_23;    //   true



terminal Integer _INTEGER_;
terminal Double _DOUBLE_;
terminal String _IDENT_;



start with Program;


Program ::= ListStm:p_1  {: RESULT = new lama.Absyn.Prog(p_1); :}
;
ListStm ::=  /* empty */  {: RESULT = new lama.Absyn.ListStm(); :}
  | ListStm:p_1 Stm:p_2  {: RESULT = p_1; p_1.addLast(p_2); :}
;
Stm ::= Type:p_1 _IDENT_:p_2 _SYMB_0:p_3  {: RESULT = new lama.Absyn.SDecl(p_1,p_2); :}
  | _IDENT_:p_1 _SYMB_1:p_2 Exp:p_3 _SYMB_0:p_4  {: RESULT = new lama.Absyn.SAss(p_1,p_3); :}
  | Type:p_1 _IDENT_:p_2 _SYMB_1:p_3 Exp:p_4 _SYMB_0:p_5  {: RESULT = new lama.Absyn.SInit(p_1,p_2,p_4); :}
  | _SYMB_2:p_1 ListStm:p_2 _SYMB_3:p_3  {: RESULT = new lama.Absyn.SBlock(p_2); :}
  | _SYMB_22:p_1 Exp:p_2 _SYMB_0:p_3  {: RESULT = new lama.Absyn.SPrint(p_2); :}
;
Exp8 ::= _IDENT_:p_1  {: RESULT = new lama.Absyn.EVar(p_1); :}
  | _INTEGER_:p_1  {: RESULT = new lama.Absyn.EInt(p_1); :}
  | _DOUBLE_:p_1  {: RESULT = new lama.Absyn.EDouble(p_1); :}
  | Bool:p_1  {: RESULT = new lama.Absyn.EBool(p_1); :}
  | _SYMB_16:p_1 Exp:p_2 _SYMB_17:p_3  {: RESULT = p_2; :}
;
Exp7 ::= _IDENT_:p_1 _SYMB_4:p_2  {: RESULT = new lama.Absyn.EPostIncr(p_1); :}
  | _IDENT_:p_1 _SYMB_5:p_2  {: RESULT = new lama.Absyn.EPostDecr(p_1); :}
  | Exp8:p_1  {: RESULT = p_1; :}
;
Exp6 ::= _SYMB_4:p_1 _IDENT_:p_2  {: RESULT = new lama.Absyn.EPreIncr(p_2); :}
  | _SYMB_5:p_1 _IDENT_:p_2  {: RESULT = new lama.Absyn.EPreDecr(p_2); :}
  | Exp7:p_1  {: RESULT = p_1; :}
;
Exp5 ::= Exp5:p_1 _SYMB_6:p_2 Exp6:p_3  {: RESULT = new lama.Absyn.EMul(p_1,p_3); :}
  | Exp5:p_1 _SYMB_7:p_2 Exp6:p_3  {: RESULT = new lama.Absyn.EDiv(p_1,p_3); :}
  | Exp6:p_1  {: RESULT = p_1; :}
;
Exp4 ::= Exp4:p_1 _SYMB_8:p_2 Exp5:p_3  {: RESULT = new lama.Absyn.EAdd(p_1,p_3); :}
  | Exp4:p_1 _SYMB_9:p_2 Exp5:p_3  {: RESULT = new lama.Absyn.ESub(p_1,p_3); :}
  | Exp5:p_1  {: RESULT = p_1; :}
;
Exp2 ::= Exp3:p_1 _SYMB_10:p_2 Exp3:p_3  {: RESULT = new lama.Absyn.ELess(p_1,p_3); :}
  | Exp3:p_1 _SYMB_11:p_2 Exp3:p_3  {: RESULT = new lama.Absyn.EGreater(p_1,p_3); :}
  | Exp3:p_1 _SYMB_12:p_2 Exp3:p_3  {: RESULT = new lama.Absyn.ELEq(p_1,p_3); :}
  | Exp3:p_1 _SYMB_13:p_2 Exp3:p_3  {: RESULT = new lama.Absyn.EGEq(p_1,p_3); :}
  | Exp3:p_1  {: RESULT = p_1; :}
;
Exp1 ::= Exp2:p_1 _SYMB_14:p_2 Exp2:p_3  {: RESULT = new lama.Absyn.EEq(p_1,p_3); :}
  | Exp2:p_1 _SYMB_15:p_2 Exp2:p_3  {: RESULT = new lama.Absyn.ENEq(p_1,p_3); :}
  | Exp2:p_1  {: RESULT = p_1; :}
;
Bool ::= _SYMB_23:p_1  {: RESULT = new lama.Absyn.Bool_true(); :}
  | _SYMB_20:p_1  {: RESULT = new lama.Absyn.Bool_false(); :}
;
Exp ::= Exp1:p_1  {: RESULT = p_1; :}
;
Exp3 ::= Exp4:p_1  {: RESULT = p_1; :}
;
Type ::= _SYMB_21:p_1  {: RESULT = new lama.Absyn.TInt(); :}
  | _SYMB_19:p_1  {: RESULT = new lama.Absyn.TDouble(); :}
  | _SYMB_18:p_1  {: RESULT = new lama.Absyn.TBool(); :}
;

