// File generated by the BNF Converter (bnfc 2.9.4).

package lama;
/** Composition Visitor
*/

public class ComposVisitor<A> implements
  lama.Absyn.Program.Visitor<lama.Absyn.Program,A>,
  lama.Absyn.Stm.Visitor<lama.Absyn.Stm,A>,
  lama.Absyn.Exp.Visitor<lama.Absyn.Exp,A>,
  lama.Absyn.Bool.Visitor<lama.Absyn.Bool,A>,
  lama.Absyn.Type.Visitor<lama.Absyn.Type,A>
{
    /* Program */
    public lama.Absyn.Program visit(lama.Absyn.Prog p, A arg)
    {
      lama.Absyn.ListStm liststm_ = new lama.Absyn.ListStm();
      for (lama.Absyn.Stm x : p.liststm_)
      {
        liststm_.add(x.accept(this,arg));
      }
      return new lama.Absyn.Prog(liststm_);
    }

    /* Stm */
    public lama.Absyn.Stm visit(lama.Absyn.SDecl p, A arg)
    {
      lama.Absyn.Type type_ = p.type_.accept(this, arg);
      String ident_ = p.ident_;
      return new lama.Absyn.SDecl(type_, ident_);
    }
    public lama.Absyn.Stm visit(lama.Absyn.SAss p, A arg)
    {
      String ident_ = p.ident_;
      lama.Absyn.Exp exp_ = p.exp_.accept(this, arg);
      return new lama.Absyn.SAss(ident_, exp_);
    }
    public lama.Absyn.Stm visit(lama.Absyn.SInit p, A arg)
    {
      lama.Absyn.Type type_ = p.type_.accept(this, arg);
      String ident_ = p.ident_;
      lama.Absyn.Exp exp_ = p.exp_.accept(this, arg);
      return new lama.Absyn.SInit(type_, ident_, exp_);
    }
    public lama.Absyn.Stm visit(lama.Absyn.SBlock p, A arg)
    {
      lama.Absyn.ListStm liststm_ = new lama.Absyn.ListStm();
      for (lama.Absyn.Stm x : p.liststm_)
      {
        liststm_.add(x.accept(this,arg));
      }
      return new lama.Absyn.SBlock(liststm_);
    }
    public lama.Absyn.Stm visit(lama.Absyn.SPrint p, A arg)
    {
      lama.Absyn.Exp exp_ = p.exp_.accept(this, arg);
      return new lama.Absyn.SPrint(exp_);
    }

    /* Exp */
    public lama.Absyn.Exp visit(lama.Absyn.EVar p, A arg)
    {
      String ident_ = p.ident_;
      return new lama.Absyn.EVar(ident_);
    }
    public lama.Absyn.Exp visit(lama.Absyn.EInt p, A arg)
    {
      Integer integer_ = p.integer_;
      return new lama.Absyn.EInt(integer_);
    }
    public lama.Absyn.Exp visit(lama.Absyn.EDouble p, A arg)
    {
      Double double_ = p.double_;
      return new lama.Absyn.EDouble(double_);
    }
    public lama.Absyn.Exp visit(lama.Absyn.EBool p, A arg)
    {
      lama.Absyn.Bool bool_ = p.bool_.accept(this, arg);
      return new lama.Absyn.EBool(bool_);
    }
    public lama.Absyn.Exp visit(lama.Absyn.EPostIncr p, A arg)
    {
      String ident_ = p.ident_;
      return new lama.Absyn.EPostIncr(ident_);
    }
    public lama.Absyn.Exp visit(lama.Absyn.EPostDecr p, A arg)
    {
      String ident_ = p.ident_;
      return new lama.Absyn.EPostDecr(ident_);
    }
    public lama.Absyn.Exp visit(lama.Absyn.EPreIncr p, A arg)
    {
      String ident_ = p.ident_;
      return new lama.Absyn.EPreIncr(ident_);
    }
    public lama.Absyn.Exp visit(lama.Absyn.EPreDecr p, A arg)
    {
      String ident_ = p.ident_;
      return new lama.Absyn.EPreDecr(ident_);
    }
    public lama.Absyn.Exp visit(lama.Absyn.EMul p, A arg)
    {
      lama.Absyn.Exp exp_1 = p.exp_1.accept(this, arg);
      lama.Absyn.Exp exp_2 = p.exp_2.accept(this, arg);
      return new lama.Absyn.EMul(exp_1, exp_2);
    }
    public lama.Absyn.Exp visit(lama.Absyn.EDiv p, A arg)
    {
      lama.Absyn.Exp exp_1 = p.exp_1.accept(this, arg);
      lama.Absyn.Exp exp_2 = p.exp_2.accept(this, arg);
      return new lama.Absyn.EDiv(exp_1, exp_2);
    }
    public lama.Absyn.Exp visit(lama.Absyn.EAdd p, A arg)
    {
      lama.Absyn.Exp exp_1 = p.exp_1.accept(this, arg);
      lama.Absyn.Exp exp_2 = p.exp_2.accept(this, arg);
      return new lama.Absyn.EAdd(exp_1, exp_2);
    }
    public lama.Absyn.Exp visit(lama.Absyn.ESub p, A arg)
    {
      lama.Absyn.Exp exp_1 = p.exp_1.accept(this, arg);
      lama.Absyn.Exp exp_2 = p.exp_2.accept(this, arg);
      return new lama.Absyn.ESub(exp_1, exp_2);
    }
    public lama.Absyn.Exp visit(lama.Absyn.ELess p, A arg)
    {
      lama.Absyn.Exp exp_1 = p.exp_1.accept(this, arg);
      lama.Absyn.Exp exp_2 = p.exp_2.accept(this, arg);
      return new lama.Absyn.ELess(exp_1, exp_2);
    }
    public lama.Absyn.Exp visit(lama.Absyn.EGreater p, A arg)
    {
      lama.Absyn.Exp exp_1 = p.exp_1.accept(this, arg);
      lama.Absyn.Exp exp_2 = p.exp_2.accept(this, arg);
      return new lama.Absyn.EGreater(exp_1, exp_2);
    }
    public lama.Absyn.Exp visit(lama.Absyn.ELEq p, A arg)
    {
      lama.Absyn.Exp exp_1 = p.exp_1.accept(this, arg);
      lama.Absyn.Exp exp_2 = p.exp_2.accept(this, arg);
      return new lama.Absyn.ELEq(exp_1, exp_2);
    }
    public lama.Absyn.Exp visit(lama.Absyn.EGEq p, A arg)
    {
      lama.Absyn.Exp exp_1 = p.exp_1.accept(this, arg);
      lama.Absyn.Exp exp_2 = p.exp_2.accept(this, arg);
      return new lama.Absyn.EGEq(exp_1, exp_2);
    }
    public lama.Absyn.Exp visit(lama.Absyn.EEq p, A arg)
    {
      lama.Absyn.Exp exp_1 = p.exp_1.accept(this, arg);
      lama.Absyn.Exp exp_2 = p.exp_2.accept(this, arg);
      return new lama.Absyn.EEq(exp_1, exp_2);
    }
    public lama.Absyn.Exp visit(lama.Absyn.ENEq p, A arg)
    {
      lama.Absyn.Exp exp_1 = p.exp_1.accept(this, arg);
      lama.Absyn.Exp exp_2 = p.exp_2.accept(this, arg);
      return new lama.Absyn.ENEq(exp_1, exp_2);
    }

    /* Bool */
    public lama.Absyn.Bool visit(lama.Absyn.Bool_true p, A arg)
    {
      return new lama.Absyn.Bool_true();
    }
    public lama.Absyn.Bool visit(lama.Absyn.Bool_false p, A arg)
    {
      return new lama.Absyn.Bool_false();
    }

    /* Type */
    public lama.Absyn.Type visit(lama.Absyn.TInt p, A arg)
    {
      return new lama.Absyn.TInt();
    }
    public lama.Absyn.Type visit(lama.Absyn.TDouble p, A arg)
    {
      return new lama.Absyn.TDouble();
    }
    public lama.Absyn.Type visit(lama.Absyn.TBool p, A arg)
    {
      return new lama.Absyn.TBool();
    }
}
