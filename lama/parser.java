
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package lama;

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\100\000\002\002\004\000\002\002\003\000\002\003" +
    "\002\000\002\003\004\000\002\004\004\000\002\004\005" +
    "\000\002\004\006\000\002\004\007\000\002\004\005\000" +
    "\002\004\007\000\002\004\005\000\002\004\011\000\002" +
    "\004\015\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\005\000\002\006\004" +
    "\000\002\006\004\000\002\006\003\000\002\007\004\000" +
    "\002\007\004\000\002\007\003\000\002\010\005\000\002" +
    "\010\005\000\002\010\003\000\002\011\005\000\002\011" +
    "\005\000\002\011\003\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\003\000" +
    "\002\013\005\000\002\013\005\000\002\013\003\000\002" +
    "\014\005\000\002\014\003\000\002\015\005\000\002\015" +
    "\003\000\002\016\010\000\002\016\003\000\002\017\006" +
    "\000\002\017\004\000\002\017\004\000\002\017\004\000" +
    "\002\017\003\000\002\020\002\000\002\020\003\000\002" +
    "\020\005\000\002\021\003\000\002\021\003\000\002\022" +
    "\003\000\002\023\003\000\002\024\003\000\002\025\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\005\000\002\027\005\000\002\027\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\176\000\044\002\uffff\006\uffff\010\uffff\012\uffff\013" +
    "\uffff\030\uffff\037\uffff\040\uffff\042\uffff\043\uffff\044\uffff" +
    "\045\uffff\047\uffff\050\uffff\051\uffff\052\uffff\053\uffff\001" +
    "\002\000\004\002\200\001\002\000\044\002\000\006\031" +
    "\010\027\012\026\013\025\030\046\037\040\040\036\042" +
    "\022\043\020\044\016\045\014\047\012\050\006\051\007" +
    "\052\023\053\017\001\002\000\004\006\174\001\002\000" +
    "\054\004\ufff3\007\ufff3\011\ufff3\014\ufff3\015\ufff3\016\ufff3" +
    "\017\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3\025" +
    "\ufff3\026\ufff3\027\ufff3\031\ufff3\032\ufff3\033\ufff3\034\ufff3" +
    "\035\ufff3\036\ufff3\001\002\000\054\004\uffea\007\uffea\011" +
    "\uffea\014\uffea\015\uffea\016\uffea\017\uffea\020\uffea\021\uffea" +
    "\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea\031" +
    "\uffea\032\uffea\033\uffea\034\uffea\035\uffea\036\uffea\001\002" +
    "\000\054\004\uffe7\007\uffe7\011\uffe7\014\uffe7\015\uffe7\016" +
    "\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7" +
    "\025\uffe7\026\uffe7\027\uffe7\031\uffe7\032\uffe7\033\uffe7\034" +
    "\uffe7\035\uffe7\036\uffe7\001\002\000\054\004\uffcd\007\uffcd" +
    "\011\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021" +
    "\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd" +
    "\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\001" +
    "\002\000\054\004\uffe4\007\uffe4\011\uffe4\014\133\015\132" +
    "\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024" +
    "\uffe4\025\uffe4\026\uffe4\027\uffe4\031\uffe4\032\uffe4\033\uffe4" +
    "\034\uffe4\035\uffe4\036\uffe4\001\002\000\024\006\060\012" +
    "\026\013\025\030\062\042\022\047\012\051\007\052\023" +
    "\053\056\001\002\000\050\002\ufffe\006\ufffe\010\ufffe\011" +
    "\ufffe\012\ufffe\013\ufffe\030\ufffe\037\ufffe\040\ufffe\042\ufffe" +
    "\043\ufffe\044\ufffe\045\ufffe\046\ufffe\047\ufffe\050\ufffe\051" +
    "\ufffe\052\ufffe\053\ufffe\001\002\000\010\007\uffc7\031\uffc7" +
    "\053\uffc7\001\002\000\052\004\ufff4\005\167\012\073\013" +
    "\072\014\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4" +
    "\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4\032" +
    "\ufff4\033\ufff4\034\ufff4\035\ufff4\001\002\000\004\006\161" +
    "\001\002\000\010\007\uffc2\031\uffc2\053\uffc2\001\002\000" +
    "\054\004\uffcc\007\uffcc\011\uffcc\014\uffcc\015\uffcc\016\uffcc" +
    "\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025" +
    "\uffcc\026\uffcc\027\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc" +
    "\035\uffcc\036\uffcc\001\002\000\054\004\ufff2\007\ufff2\011" +
    "\ufff2\014\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2" +
    "\022\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2\031" +
    "\ufff2\032\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2\001\002" +
    "\000\004\053\143\001\002\000\004\053\142\001\002\000" +
    "\004\053\141\001\002\000\044\006\uffff\010\uffff\011\uffff" +
    "\012\uffff\013\uffff\030\uffff\037\uffff\040\uffff\042\uffff\043" +
    "\uffff\044\uffff\045\uffff\047\uffff\050\uffff\051\uffff\052\uffff" +
    "\053\uffff\001\002\000\050\004\uffc9\007\uffc9\011\uffc9\016" +
    "\127\017\130\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9" +
    "\025\uffc9\026\uffc9\027\uffc9\031\uffc9\032\uffc9\033\uffc9\034" +
    "\uffc9\035\uffc9\036\uffc9\001\002\000\032\006\031\012\026" +
    "\013\025\030\046\037\040\040\036\042\022\044\016\047" +
    "\012\051\007\052\023\053\056\001\002\000\044\004\uffdf" +
    "\007\uffdf\011\uffdf\020\122\021\121\022\120\023\117\024" +
    "\uffdf\025\uffdf\026\uffdf\027\uffdf\031\uffdf\032\uffdf\033\uffdf" +
    "\034\uffdf\035\uffdf\036\uffdf\001\002\000\034\004\uffdc\007" +
    "\uffdc\011\uffdc\024\114\025\113\026\uffdc\027\uffdc\031\uffdc" +
    "\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\001\002\000" +
    "\004\004\112\001\002\000\030\004\uffca\007\uffca\011\uffca" +
    "\026\uffca\027\uffca\031\uffca\032\uffca\033\uffca\034\uffca\035" +
    "\uffca\036\uffca\001\002\000\010\007\uffc6\031\uffc6\053\uffc6" +
    "\001\002\000\030\004\uffda\007\uffda\011\uffda\026\uffda\027" +
    "\uffda\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda" +
    "\001\002\000\010\007\uffc5\031\uffc5\053\uffc5\001\002\000" +
    "\030\004\uffd8\007\uffd8\011\uffd8\026\110\027\uffd8\031\uffd8" +
    "\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\001\002\000" +
    "\026\004\uffcb\007\uffcb\011\uffcb\027\106\031\uffcb\032\uffcb" +
    "\033\uffcb\034\uffcb\035\uffcb\036\uffcb\001\002\000\054\004" +
    "\ufff1\007\ufff1\011\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1" +
    "\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1\026" +
    "\ufff1\027\ufff1\031\ufff1\032\ufff1\033\ufff1\034\ufff1\035\ufff1" +
    "\036\ufff1\001\002\000\024\004\uffd1\007\uffd1\011\uffd1\031" +
    "\uffd1\032\100\033\103\034\102\035\101\036\uffd1\001\002" +
    "\000\014\004\uffd6\007\uffd6\011\uffd6\031\uffd6\036\uffd6\001" +
    "\002\000\014\006\051\030\052\037\040\040\036\044\016" +
    "\001\002\000\054\004\uffc8\007\uffc8\011\uffc8\014\uffc8\015" +
    "\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8" +
    "\024\uffc8\025\uffc8\026\uffc8\027\uffc8\031\uffc8\032\uffc8\033" +
    "\uffc8\034\uffc8\035\uffc8\036\uffc8\001\002\000\054\004\uffed" +
    "\007\uffed\011\uffed\014\uffed\015\uffed\016\uffed\017\uffed\020" +
    "\uffed\021\uffed\022\uffed\023\uffed\024\uffed\025\uffed\026\uffed" +
    "\027\uffed\031\uffed\032\uffed\033\uffed\034\uffed\035\uffed\036" +
    "\uffed\001\002\000\014\006\051\030\052\037\040\040\036" +
    "\044\016\001\002\000\014\006\051\030\052\037\040\040" +
    "\036\044\016\001\002\000\004\031\054\001\002\000\010" +
    "\007\uffc3\030\055\053\uffc3\001\002\000\026\006\060\012" +
    "\026\013\025\030\062\031\uffd0\042\022\047\012\051\007" +
    "\052\023\053\056\001\002\000\060\004\ufff4\007\ufff4\011" +
    "\ufff4\012\073\013\072\014\ufff4\015\ufff4\016\ufff4\017\ufff4" +
    "\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026" +
    "\ufff4\027\ufff4\031\ufff4\032\ufff4\033\ufff4\034\ufff4\035\ufff4" +
    "\036\ufff4\001\002\000\004\031\071\001\002\000\024\006" +
    "\060\012\026\013\025\030\062\042\022\047\012\051\007" +
    "\052\023\053\056\001\002\000\006\031\uffcf\036\065\001" +
    "\002\000\014\006\051\030\052\037\040\040\036\044\016" +
    "\001\002\000\004\031\064\001\002\000\004\030\055\001" +
    "\002\000\026\006\060\012\026\013\025\030\062\031\uffd0" +
    "\042\022\047\012\051\007\052\023\053\056\001\002\000" +
    "\004\031\uffce\001\002\000\004\007\070\001\002\000\054" +
    "\004\ufff0\007\ufff0\011\ufff0\014\ufff0\015\ufff0\016\ufff0\017" +
    "\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0" +
    "\026\ufff0\027\ufff0\031\ufff0\032\ufff0\033\ufff0\034\ufff0\035" +
    "\ufff0\036\ufff0\001\002\000\014\004\uffd7\007\uffd7\011\uffd7" +
    "\031\uffd7\036\uffd7\001\002\000\054\004\uffee\007\uffee\011" +
    "\uffee\014\uffee\015\uffee\016\uffee\017\uffee\020\uffee\021\uffee" +
    "\022\uffee\023\uffee\024\uffee\025\uffee\026\uffee\027\uffee\031" +
    "\uffee\032\uffee\033\uffee\034\uffee\035\uffee\036\uffee\001\002" +
    "\000\054\004\uffef\007\uffef\011\uffef\014\uffef\015\uffef\016" +
    "\uffef\017\uffef\020\uffef\021\uffef\022\uffef\023\uffef\024\uffef" +
    "\025\uffef\026\uffef\027\uffef\031\uffef\032\uffef\033\uffef\034" +
    "\uffef\035\uffef\036\uffef\001\002\000\004\031\075\001\002" +
    "\000\010\007\uffc3\031\uffc3\053\uffc3\001\002\000\004\007" +
    "\077\001\002\000\010\007\uffc4\031\uffc4\053\uffc4\001\002" +
    "\000\022\006\060\012\026\013\025\042\022\047\012\051" +
    "\007\052\023\053\056\001\002\000\014\004\uffd2\007\uffd2" +
    "\011\uffd2\031\uffd2\036\uffd2\001\002\000\014\004\uffd3\007" +
    "\uffd3\011\uffd3\031\uffd3\036\uffd3\001\002\000\014\004\uffd4" +
    "\007\uffd4\011\uffd4\031\uffd4\036\uffd4\001\002\000\004\007" +
    "\105\001\002\000\014\004\uffd5\007\uffd5\011\uffd5\031\uffd5" +
    "\036\uffd5\001\002\000\022\006\060\012\026\013\025\042" +
    "\022\047\012\051\007\052\023\053\056\001\002\000\030" +
    "\004\uffd9\007\uffd9\011\uffd9\026\110\027\uffd9\031\uffd9\032" +
    "\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\001\002\000\022" +
    "\006\060\012\026\013\025\042\022\047\012\051\007\052" +
    "\023\053\056\001\002\000\030\004\uffdb\007\uffdb\011\uffdb" +
    "\026\uffdb\027\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035" +
    "\uffdb\036\uffdb\001\002\000\052\002\ufffd\006\ufffd\010\ufffd" +
    "\011\ufffd\012\ufffd\013\ufffd\030\ufffd\037\ufffd\040\ufffd\041" +
    "\ufffd\042\ufffd\043\ufffd\044\ufffd\045\ufffd\046\ufffd\047\ufffd" +
    "\050\ufffd\051\ufffd\052\ufffd\053\ufffd\001\002\000\022\006" +
    "\060\012\026\013\025\042\022\047\012\051\007\052\023" +
    "\053\056\001\002\000\022\006\060\012\026\013\025\042" +
    "\022\047\012\051\007\052\023\053\056\001\002\000\030" +
    "\004\uffde\007\uffde\011\uffde\026\uffde\027\uffde\031\uffde\032" +
    "\uffde\033\uffde\034\uffde\035\uffde\036\uffde\001\002\000\030" +
    "\004\uffdd\007\uffdd\011\uffdd\026\uffdd\027\uffdd\031\uffdd\032" +
    "\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\001\002\000\022" +
    "\006\060\012\026\013\025\042\022\047\012\051\007\052" +
    "\023\053\056\001\002\000\022\006\060\012\026\013\025" +
    "\042\022\047\012\051\007\052\023\053\056\001\002\000" +
    "\022\006\060\012\026\013\025\042\022\047\012\051\007" +
    "\052\023\053\056\001\002\000\022\006\060\012\026\013" +
    "\025\042\022\047\012\051\007\052\023\053\056\001\002" +
    "\000\034\004\uffe3\007\uffe3\011\uffe3\024\uffe3\025\uffe3\026" +
    "\uffe3\027\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3" +
    "\036\uffe3\001\002\000\034\004\uffe2\007\uffe2\011\uffe2\024" +
    "\uffe2\025\uffe2\026\uffe2\027\uffe2\031\uffe2\032\uffe2\033\uffe2" +
    "\034\uffe2\035\uffe2\036\uffe2\001\002\000\034\004\uffe1\007" +
    "\uffe1\011\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\031\uffe1" +
    "\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\001\002\000" +
    "\034\004\uffe0\007\uffe0\011\uffe0\024\uffe0\025\uffe0\026\uffe0" +
    "\027\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036" +
    "\uffe0\001\002\000\022\006\060\012\026\013\025\042\022" +
    "\047\012\051\007\052\023\053\056\001\002\000\022\006" +
    "\060\012\026\013\025\042\022\047\012\051\007\052\023" +
    "\053\056\001\002\000\054\004\uffe5\007\uffe5\011\uffe5\014" +
    "\133\015\132\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5" +
    "\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\031\uffe5\032" +
    "\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\001\002\000\022" +
    "\006\060\012\026\013\025\042\022\047\012\051\007\052" +
    "\023\053\056\001\002\000\022\006\060\012\026\013\025" +
    "\042\022\047\012\051\007\052\023\053\056\001\002\000" +
    "\054\004\uffe9\007\uffe9\011\uffe9\014\uffe9\015\uffe9\016\uffe9" +
    "\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025" +
    "\uffe9\026\uffe9\027\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9" +
    "\035\uffe9\036\uffe9\001\002\000\054\004\uffe8\007\uffe8\011" +
    "\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8" +
    "\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\031" +
    "\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\001\002" +
    "\000\054\004\uffe6\007\uffe6\011\uffe6\014\133\015\132\016" +
    "\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6" +
    "\025\uffe6\026\uffe6\027\uffe6\031\uffe6\032\uffe6\033\uffe6\034" +
    "\uffe6\035\uffe6\036\uffe6\001\002\000\044\006\031\010\027" +
    "\011\140\012\026\013\025\030\046\037\040\040\036\042" +
    "\022\043\020\044\016\045\014\047\012\050\006\051\007" +
    "\052\023\053\017\001\002\000\052\002\ufff7\006\ufff7\010" +
    "\ufff7\011\ufff7\012\ufff7\013\ufff7\030\ufff7\037\ufff7\040\ufff7" +
    "\041\ufff7\042\ufff7\043\ufff7\044\ufff7\045\ufff7\046\ufff7\047" +
    "\ufff7\050\ufff7\051\ufff7\052\ufff7\053\ufff7\001\002\000\054" +
    "\004\uffec\007\uffec\011\uffec\014\uffec\015\uffec\016\uffec\017" +
    "\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec\025\uffec" +
    "\026\uffec\027\uffec\031\uffec\032\uffec\033\uffec\034\uffec\035" +
    "\uffec\036\uffec\001\002\000\054\004\uffeb\007\uffeb\011\uffeb" +
    "\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022" +
    "\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\031\uffeb" +
    "\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\001\002\000" +
    "\010\004\146\005\145\006\144\001\002\000\014\006\051" +
    "\030\052\037\040\040\036\044\016\001\002\000\024\006" +
    "\060\012\026\013\025\030\062\042\022\047\012\051\007" +
    "\052\023\053\056\001\002\000\052\002\ufffc\006\ufffc\010" +
    "\ufffc\011\ufffc\012\ufffc\013\ufffc\030\ufffc\037\ufffc\040\ufffc" +
    "\041\ufffc\042\ufffc\043\ufffc\044\ufffc\045\ufffc\046\ufffc\047" +
    "\ufffc\050\ufffc\051\ufffc\052\ufffc\053\ufffc\001\002\000\004" +
    "\004\150\001\002\000\052\002\ufffa\006\ufffa\010\ufffa\011" +
    "\ufffa\012\ufffa\013\ufffa\030\ufffa\037\ufffa\040\ufffa\041\ufffa" +
    "\042\ufffa\043\ufffa\044\ufffa\045\ufffa\046\ufffa\047\ufffa\050" +
    "\ufffa\051\ufffa\052\ufffa\053\ufffa\001\002\000\004\053\152" +
    "\001\002\000\004\007\153\001\002\000\004\010\154\001" +
    "\002\000\044\006\uffff\010\uffff\012\uffff\013\uffff\030\uffff" +
    "\037\uffff\040\uffff\042\uffff\043\uffff\044\uffff\045\uffff\046" +
    "\uffff\047\uffff\050\uffff\051\uffff\052\uffff\053\uffff\001\002" +
    "\000\044\006\031\010\027\012\026\013\025\030\046\037" +
    "\040\040\036\042\022\043\020\044\016\045\014\046\156" +
    "\047\012\050\006\051\007\052\023\053\017\001\002\000" +
    "\024\006\060\012\026\013\025\030\062\042\022\047\012" +
    "\051\007\052\023\053\056\001\002\000\004\011\160\001" +
    "\002\000\052\002\ufff5\006\ufff5\010\ufff5\011\ufff5\012\ufff5" +
    "\013\ufff5\030\ufff5\037\ufff5\040\ufff5\041\ufff5\042\ufff5\043" +
    "\ufff5\044\ufff5\045\ufff5\046\ufff5\047\ufff5\050\ufff5\051\ufff5" +
    "\052\ufff5\053\ufff5\001\002\000\024\006\060\012\026\013" +
    "\025\030\062\042\022\047\012\051\007\052\023\053\056" +
    "\001\002\000\004\007\163\001\002\000\042\006\031\010" +
    "\027\012\026\013\025\030\046\037\040\040\036\042\022" +
    "\043\020\044\016\045\014\047\012\050\006\051\007\052" +
    "\023\053\017\001\002\000\004\041\165\001\002\000\042" +
    "\006\031\010\027\012\026\013\025\030\046\037\040\040" +
    "\036\042\022\043\020\044\016\045\014\047\012\050\006" +
    "\051\007\052\023\053\017\001\002\000\052\002\ufff6\006" +
    "\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\030\ufff6\037\ufff6" +
    "\040\ufff6\041\ufff6\042\ufff6\043\ufff6\044\ufff6\045\ufff6\046" +
    "\ufff6\047\ufff6\050\ufff6\051\ufff6\052\ufff6\053\ufff6\001\002" +
    "\000\024\006\060\012\026\013\025\030\062\042\022\047" +
    "\012\051\007\052\023\053\056\001\002\000\004\004\171" +
    "\001\002\000\052\002\ufffb\006\ufffb\010\ufffb\011\ufffb\012" +
    "\ufffb\013\ufffb\030\ufffb\037\ufffb\040\ufffb\041\ufffb\042\ufffb" +
    "\043\ufffb\044\ufffb\045\ufffb\046\ufffb\047\ufffb\050\ufffb\051" +
    "\ufffb\052\ufffb\053\ufffb\001\002\000\004\004\173\001\002" +
    "\000\052\002\ufff9\006\ufff9\010\ufff9\011\ufff9\012\ufff9\013" +
    "\ufff9\030\ufff9\037\ufff9\040\ufff9\041\ufff9\042\ufff9\043\ufff9" +
    "\044\ufff9\045\ufff9\046\ufff9\047\ufff9\050\ufff9\051\ufff9\052" +
    "\ufff9\053\ufff9\001\002\000\024\006\060\012\026\013\025" +
    "\030\062\042\022\047\012\051\007\052\023\053\056\001" +
    "\002\000\004\007\176\001\002\000\042\006\031\010\027" +
    "\012\026\013\025\030\046\037\040\040\036\042\022\043" +
    "\020\044\016\045\014\047\012\050\006\051\007\052\023" +
    "\053\017\001\002\000\052\002\ufff8\006\ufff8\010\ufff8\011" +
    "\ufff8\012\ufff8\013\ufff8\030\ufff8\037\ufff8\040\ufff8\041\ufff8" +
    "\042\ufff8\043\ufff8\044\ufff8\045\ufff8\046\ufff8\047\ufff8\050" +
    "\ufff8\051\ufff8\052\ufff8\053\ufff8\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\176\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\050\004\014\005\046\006\007\007\010\010\012" +
    "\011\027\012\032\013\034\014\040\015\041\016\033\017" +
    "\044\021\042\022\043\023\036\024\031\025\047\026\020" +
    "\027\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\005\046\006\007\007\010\010\012\011" +
    "\027\012\032\013\034\014\040\015\041\016\171\017\044" +
    "\021\042\022\043\023\036\024\031\025\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\136\001\001\000\002\001\001\000\046\005" +
    "\046\006\007\007\010\010\012\011\027\012\032\013\034" +
    "\014\040\015\041\016\066\017\044\021\042\022\043\023" +
    "\036\024\031\025\047\026\020\027\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\026\020\027\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\026" +
    "\020\027\075\001\001\000\006\026\020\027\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\005\046\006" +
    "\007\007\010\010\012\011\027\012\032\013\034\014\040" +
    "\015\041\016\060\017\044\020\056\021\042\022\043\023" +
    "\036\024\031\025\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\005\046\006\007\007\010\010\012\011" +
    "\027\012\032\013\034\014\040\015\041\016\066\017\044" +
    "\021\042\022\043\023\036\024\031\025\047\001\001\000" +
    "\002\001\001\000\006\026\020\027\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\005\046\006\007\007" +
    "\010\010\012\011\027\012\032\013\034\014\040\015\041" +
    "\016\060\017\044\020\065\021\042\022\043\023\036\024" +
    "\031\025\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\005\046\006\007\007" +
    "\010\010\012\011\027\012\032\013\034\014\040\015\041" +
    "\021\042\022\103\023\036\024\031\025\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\005\046\006\007\007" +
    "\010\010\012\011\027\012\032\013\034\014\106\021\042" +
    "\023\036\024\031\025\047\001\001\000\002\001\001\000" +
    "\030\005\046\006\007\007\010\010\012\011\027\012\032" +
    "\013\034\021\042\023\110\024\031\025\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\005\046\006\007" +
    "\007\010\010\012\011\027\012\115\021\042\024\031\025" +
    "\047\001\001\000\024\005\046\006\007\007\010\010\012" +
    "\011\027\012\114\021\042\024\031\025\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\005\046\006\007" +
    "\007\010\010\012\011\027\021\042\024\125\025\047\001" +
    "\001\000\022\005\046\006\007\007\010\010\012\011\027" +
    "\021\042\024\124\025\047\001\001\000\022\005\046\006" +
    "\007\007\010\010\012\011\027\021\042\024\123\025\047" +
    "\001\001\000\022\005\046\006\007\007\010\010\012\011" +
    "\027\021\042\024\122\025\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\005\046\006\007\007\010\010\135\021\042\025\047" +
    "\001\001\000\016\005\046\006\007\007\010\010\130\021" +
    "\042\025\047\001\001\000\002\001\001\000\014\005\046" +
    "\006\007\007\134\021\042\025\047\001\001\000\014\005" +
    "\046\006\007\007\133\021\042\025\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\050\004" +
    "\014\005\046\006\007\007\010\010\012\011\027\012\032" +
    "\013\034\014\040\015\041\016\033\017\044\021\042\022" +
    "\043\023\036\024\031\025\047\026\020\027\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\026\020\027\150\001\001\000\042" +
    "\005\046\006\007\007\010\010\012\011\027\012\032\013" +
    "\034\014\040\015\041\016\146\017\044\021\042\022\043" +
    "\023\036\024\031\025\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\154\001\001\000" +
    "\050\004\014\005\046\006\007\007\010\010\012\011\027" +
    "\012\032\013\034\014\040\015\041\016\033\017\044\021" +
    "\042\022\043\023\036\024\031\025\047\026\020\027\023" +
    "\001\001\000\042\005\046\006\007\007\010\010\012\011" +
    "\027\012\032\013\034\014\040\015\041\016\156\017\044" +
    "\021\042\022\043\023\036\024\031\025\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\005\046\006\007" +
    "\007\010\010\012\011\027\012\032\013\034\014\040\015" +
    "\041\016\161\017\044\021\042\022\043\023\036\024\031" +
    "\025\047\001\001\000\002\001\001\000\050\004\163\005" +
    "\046\006\007\007\010\010\012\011\027\012\032\013\034" +
    "\014\040\015\041\016\033\017\044\021\042\022\043\023" +
    "\036\024\031\025\047\026\020\027\023\001\001\000\002" +
    "\001\001\000\050\004\165\005\046\006\007\007\010\010" +
    "\012\011\027\012\032\013\034\014\040\015\041\016\033" +
    "\017\044\021\042\022\043\023\036\024\031\025\047\026" +
    "\020\027\023\001\001\000\002\001\001\000\042\005\046" +
    "\006\007\007\010\010\012\011\027\012\032\013\034\014" +
    "\040\015\041\016\167\017\044\021\042\022\043\023\036" +
    "\024\031\025\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\005\046" +
    "\006\007\007\010\010\012\011\027\012\032\013\034\014" +
    "\040\015\041\016\174\017\044\021\042\022\043\023\036" +
    "\024\031\025\047\001\001\000\002\001\001\000\050\004" +
    "\176\005\046\006\007\007\010\010\012\011\027\012\032" +
    "\013\034\014\040\015\041\016\033\017\044\021\042\022" +
    "\043\023\036\024\031\025\047\026\020\027\023\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public lama.Absyn.Program pProgram() throws Exception
  {
    java_cup.runtime.Symbol res = parse();
    return (lama.Absyn.Program) res.value;
  }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
  report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
  throw new Exception("Unrecoverable Syntax Error");
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


public java_cup.runtime.ComplexSymbolFactory.Location getLeftLocation(
    java_cup.runtime.ComplexSymbolFactory.Location ... locations) {
  for (java_cup.runtime.ComplexSymbolFactory.Location l : locations) {
    if (l != null) {
      return l;
    }
  }
  return null;
}

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		lama.Absyn.Program start_val = (lama.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= ListStm 
            {
              lama.Absyn.Program RESULT =null;
		lama.Absyn.ListStm p_1 = (lama.Absyn.ListStm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new lama.Absyn.Prog(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ListStm ::= 
            {
              lama.Absyn.ListStm RESULT =null;
		 RESULT = new lama.Absyn.ListStm(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListStm",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ListStm ::= ListStm Stm 
            {
              lama.Absyn.ListStm RESULT =null;
		lama.Absyn.ListStm p_1 = (lama.Absyn.ListStm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		lama.Absyn.Stm p_2 = (lama.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListStm",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Stm ::= Exp _SYMB_0 
            {
              lama.Absyn.Stm RESULT =null;
		lama.Absyn.Exp p_1 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new lama.Absyn.SExp(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Stm ::= Type _IDENT_ _SYMB_0 
            {
              lama.Absyn.Stm RESULT =null;
		lama.Absyn.Type p_1 = (lama.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new lama.Absyn.SDecl(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Stm ::= _IDENT_ _SYMB_1 Exp _SYMB_0 
            {
              lama.Absyn.Stm RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		lama.Absyn.Exp p_3 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new lama.Absyn.SAss(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Stm ::= Type _IDENT_ _SYMB_1 Exp _SYMB_0 
            {
              lama.Absyn.Stm RESULT =null;
		lama.Absyn.Type p_1 = (lama.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		lama.Absyn.Exp p_4 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new lama.Absyn.SInit(p_1,p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Stm ::= _SYMB_33 Exp _SYMB_0 
            {
              lama.Absyn.Stm RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		lama.Absyn.Exp p_2 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new lama.Absyn.SPrint(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Stm ::= _SYMB_36 _SYMB_2 Exp _SYMB_3 Stm 
            {
              lama.Absyn.Stm RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		lama.Absyn.Exp p_3 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		lama.Absyn.Stm p_5 = (lama.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new lama.Absyn.SWhile(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Stm ::= _SYMB_4 ListStm _SYMB_5 
            {
              lama.Absyn.Stm RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		lama.Absyn.ListStm p_2 = (lama.Absyn.ListStm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new lama.Absyn.SBlock(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Stm ::= _SYMB_31 _SYMB_2 Exp _SYMB_3 Stm _SYMB_29 Stm 
            {
              lama.Absyn.Stm RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		lama.Absyn.Exp p_3 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Object p_4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		lama.Absyn.Stm p_5 = (lama.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		lama.Absyn.Stm p_7 = (lama.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new lama.Absyn.SIfElse(p_3,p_5,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Stm ::= Type _IDENT_ _SYMB_2 Type _IDENT_ _SYMB_3 _SYMB_4 ListStm _SYMB_34 Exp _SYMB_5 
            {
              lama.Absyn.Stm RESULT =null;
		lama.Absyn.Type p_1 = (lama.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		lama.Absyn.Type p_4 = (lama.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		String p_5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		Object p_6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		Object p_7 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		lama.Absyn.ListStm p_8 = (lama.Absyn.ListStm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Object p_9 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		lama.Absyn.Exp p_10 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_11 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new lama.Absyn.SFun(p_1,p_2,p_4,p_5,p_8,p_10); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Exp14 ::= _IDENT_ 
            {
              lama.Absyn.Exp RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new lama.Absyn.EVar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp14",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Exp14 ::= _INTEGER_ 
            {
              lama.Absyn.Exp RESULT =null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new lama.Absyn.EInt(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp14",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Exp14 ::= _DOUBLE_ 
            {
              lama.Absyn.Exp RESULT =null;
		Double p_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new lama.Absyn.EDouble(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp14",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Exp14 ::= Bool 
            {
              lama.Absyn.Exp RESULT =null;
		lama.Absyn.Bool p_1 = (lama.Absyn.Bool)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new lama.Absyn.EBool(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp14",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Exp14 ::= _SYMB_2 Exp _SYMB_3 
            {
              lama.Absyn.Exp RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		lama.Absyn.Exp p_2 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp14",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Exp12 ::= _IDENT_ _SYMB_6 
            {
              lama.Absyn.Exp RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new lama.Absyn.EPostIncr(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp12",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Exp12 ::= _IDENT_ _SYMB_7 
            {
              lama.Absyn.Exp RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new lama.Absyn.EPostDecr(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp12",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Exp12 ::= Exp13 
            {
              lama.Absyn.Exp RESULT =null;
		lama.Absyn.Exp p_1 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp12",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Exp11 ::= _SYMB_6 _IDENT_ 
            {
              lama.Absyn.Exp RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new lama.Absyn.EPreIncr(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp11",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Exp11 ::= _SYMB_7 _IDENT_ 
            {
              lama.Absyn.Exp RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new lama.Absyn.EPreDecr(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp11",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Exp11 ::= Exp12 
            {
              lama.Absyn.Exp RESULT =null;
		lama.Absyn.Exp p_1 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp11",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Exp10 ::= Exp10 _SYMB_8 Exp11 
            {
              lama.Absyn.Exp RESULT =null;
		lama.Absyn.Exp p_1 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		lama.Absyn.Exp p_3 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new lama.Absyn.EMul(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp10",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Exp10 ::= Exp10 _SYMB_9 Exp11 
            {
              lama.Absyn.Exp RESULT =null;
		lama.Absyn.Exp p_1 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		lama.Absyn.Exp p_3 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new lama.Absyn.EDiv(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp10",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Exp10 ::= Exp11 
            {
              lama.Absyn.Exp RESULT =null;
		lama.Absyn.Exp p_1 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp10",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Exp9 ::= Exp9 _SYMB_10 Exp10 
            {
              lama.Absyn.Exp RESULT =null;
		lama.Absyn.Exp p_1 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		lama.Absyn.Exp p_3 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new lama.Absyn.EAdd(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp9",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Exp9 ::= Exp9 _SYMB_11 Exp10 
            {
              lama.Absyn.Exp RESULT =null;
		lama.Absyn.Exp p_1 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		lama.Absyn.Exp p_3 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new lama.Absyn.ESub(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp9",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Exp9 ::= Exp10 
            {
              lama.Absyn.Exp RESULT =null;
		lama.Absyn.Exp p_1 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp9",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Exp7 ::= Exp8 _SYMB_12 Exp8 
            {
              lama.Absyn.Exp RESULT =null;
		lama.Absyn.Exp p_1 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		lama.Absyn.Exp p_3 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new lama.Absyn.ELess(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp7",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Exp7 ::= Exp8 _SYMB_13 Exp8 
            {
              lama.Absyn.Exp RESULT =null;
		lama.Absyn.Exp p_1 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		lama.Absyn.Exp p_3 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new lama.Absyn.EGreater(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp7",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Exp7 ::= Exp8 _SYMB_14 Exp8 
            {
              lama.Absyn.Exp RESULT =null;
		lama.Absyn.Exp p_1 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		lama.Absyn.Exp p_3 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new lama.Absyn.ELEq(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp7",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Exp7 ::= Exp8 _SYMB_15 Exp8 
            {
              lama.Absyn.Exp RESULT =null;
		lama.Absyn.Exp p_1 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		lama.Absyn.Exp p_3 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new lama.Absyn.EGEq(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp7",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Exp7 ::= Exp8 
            {
              lama.Absyn.Exp RESULT =null;
		lama.Absyn.Exp p_1 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp7",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Exp6 ::= Exp7 _SYMB_16 Exp7 
            {
              lama.Absyn.Exp RESULT =null;
		lama.Absyn.Exp p_1 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		lama.Absyn.Exp p_3 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new lama.Absyn.EEq(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp6",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Exp6 ::= Exp7 _SYMB_17 Exp7 
            {
              lama.Absyn.Exp RESULT =null;
		lama.Absyn.Exp p_1 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		lama.Absyn.Exp p_3 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new lama.Absyn.ENEq(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp6",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Exp6 ::= Exp7 
            {
              lama.Absyn.Exp RESULT =null;
		lama.Absyn.Exp p_1 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp6",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Exp4 ::= Exp4 _SYMB_18 Exp5 
            {
              lama.Absyn.Exp RESULT =null;
		lama.Absyn.Exp p_1 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		lama.Absyn.Exp p_3 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new lama.Absyn.EAnd(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp4",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Exp4 ::= Exp5 
            {
              lama.Absyn.Exp RESULT =null;
		lama.Absyn.Exp p_1 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp4",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Exp3 ::= Exp3 _SYMB_19 Exp4 
            {
              lama.Absyn.Exp RESULT =null;
		lama.Absyn.Exp p_1 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		lama.Absyn.Exp p_3 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new lama.Absyn.EOr(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp3",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Exp3 ::= Exp4 
            {
              lama.Absyn.Exp RESULT =null;
		lama.Absyn.Exp p_1 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp3",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Exp ::= _SYMB_20 Type _SYMB_21 _SYMB_20 ListExp _SYMB_21 
            {
              lama.Absyn.Exp RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		lama.Absyn.Type p_2 = (lama.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Object p_4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		lama.Absyn.ListExp p_5 = (lama.Absyn.ListExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new lama.Absyn.Array(p_2,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Exp ::= Exp1 
            {
              lama.Absyn.Exp RESULT =null;
		lama.Absyn.Exp p_1 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Exp1 ::= Exp2 _SYMB_22 Exp2 _SYMB_3 
            {
              lama.Absyn.Exp RESULT =null;
		lama.Absyn.Exp p_1 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		lama.Absyn.Exp p_3 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new lama.Absyn.Append(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp1",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Exp1 ::= Exp2 _SYMB_23 
            {
              lama.Absyn.Exp RESULT =null;
		lama.Absyn.Exp p_1 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new lama.Absyn.Head(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp1",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Exp1 ::= Exp2 _SYMB_24 
            {
              lama.Absyn.Exp RESULT =null;
		lama.Absyn.Exp p_1 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new lama.Absyn.IsEmpty(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp1",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Exp1 ::= Exp2 _SYMB_25 
            {
              lama.Absyn.Exp RESULT =null;
		lama.Absyn.Exp p_1 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new lama.Absyn.Last(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp1",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Exp1 ::= Exp2 
            {
              lama.Absyn.Exp RESULT =null;
		lama.Absyn.Exp p_1 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp1",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ListExp ::= 
            {
              lama.Absyn.ListExp RESULT =null;
		 RESULT = new lama.Absyn.ListExp(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExp",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ListExp ::= Exp 
            {
              lama.Absyn.ListExp RESULT =null;
		lama.Absyn.Exp p_1 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new lama.Absyn.ListExp(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExp",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ListExp ::= Exp _SYMB_26 ListExp 
            {
              lama.Absyn.ListExp RESULT =null;
		lama.Absyn.Exp p_1 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		lama.Absyn.ListExp p_3 = (lama.Absyn.ListExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExp",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Bool ::= _SYMB_35 
            {
              lama.Absyn.Bool RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new lama.Absyn.Bool_true(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bool",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Bool ::= _SYMB_30 
            {
              lama.Absyn.Bool RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new lama.Absyn.Bool_false(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bool",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Exp2 ::= Exp3 
            {
              lama.Absyn.Exp RESULT =null;
		lama.Absyn.Exp p_1 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp2",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Exp5 ::= Exp6 
            {
              lama.Absyn.Exp RESULT =null;
		lama.Absyn.Exp p_1 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp5",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Exp8 ::= Exp9 
            {
              lama.Absyn.Exp RESULT =null;
		lama.Absyn.Exp p_1 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp8",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Exp13 ::= Exp14 
            {
              lama.Absyn.Exp RESULT =null;
		lama.Absyn.Exp p_1 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp13",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Type1 ::= _SYMB_32 
            {
              lama.Absyn.Type RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new lama.Absyn.TInt(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type1",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Type1 ::= _SYMB_28 
            {
              lama.Absyn.Type RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new lama.Absyn.TDouble(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type1",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Type1 ::= _SYMB_27 
            {
              lama.Absyn.Type RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new lama.Absyn.TBool(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type1",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Type1 ::= _SYMB_2 Type _SYMB_3 
            {
              lama.Absyn.Type RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		lama.Absyn.Type p_2 = (lama.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type1",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Type ::= _SYMB_20 Type _SYMB_21 
            {
              lama.Absyn.Type RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		lama.Absyn.Type p_2 = (lama.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new lama.Absyn.TArray(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Type ::= Type1 
            {
              lama.Absyn.Type RESULT =null;
		lama.Absyn.Type p_1 = (lama.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",21, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
