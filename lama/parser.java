
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package lama;

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\051\000\002\002\004\000\002\002\003\000\002\003" +
    "\002\000\002\003\004\000\002\004\005\000\002\004\006" +
    "\000\002\004\007\000\002\004\005\000\002\004\005\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\005\000\002\006\004\000\002\006" +
    "\004\000\002\006\003\000\002\007\004\000\002\007\004" +
    "\000\002\007\003\000\002\010\005\000\002\010\005\000" +
    "\002\010\003\000\002\011\005\000\002\011\005\000\002" +
    "\011\003\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\003\000\002\013\005" +
    "\000\002\013\005\000\002\013\003\000\002\014\003\000" +
    "\002\014\003\000\002\015\003\000\002\016\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\103\000\020\002\uffff\006\uffff\026\uffff\027\uffff\031" +
    "\uffff\032\uffff\036\uffff\001\002\000\004\002\105\001\002" +
    "\000\020\002\000\006\011\026\013\027\012\031\007\032" +
    "\006\036\014\001\002\000\022\010\024\011\023\024\021" +
    "\030\040\033\037\034\017\035\022\036\020\001\002\000" +
    "\004\036\uffdb\001\002\000\004\036\076\001\002\000\020" +
    "\006\uffff\007\uffff\026\uffff\027\uffff\031\uffff\032\uffff\036" +
    "\uffff\001\002\000\004\036\uffda\001\002\000\004\036\uffd9" +
    "\001\002\000\004\005\016\001\002\000\022\002\ufffe\006" +
    "\ufffe\007\ufffe\026\ufffe\027\ufffe\031\ufffe\032\ufffe\036\ufffe" +
    "\001\002\000\022\010\024\011\023\024\021\030\040\033" +
    "\037\034\017\035\022\036\020\001\002\000\032\004\ufff7" +
    "\012\ufff7\013\ufff7\014\ufff7\015\ufff7\016\ufff7\017\ufff7\020" +
    "\ufff7\021\ufff7\022\ufff7\023\ufff7\025\ufff7\001\002\000\036" +
    "\004\ufff8\010\072\011\073\012\ufff8\013\ufff8\014\ufff8\015" +
    "\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8" +
    "\025\ufff8\001\002\000\022\010\024\011\023\024\021\030" +
    "\040\033\037\034\017\035\022\036\020\001\002\000\032" +
    "\004\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6\016\ufff6\017" +
    "\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6\025\ufff6\001\002" +
    "\000\004\036\067\001\002\000\004\036\066\001\002\000" +
    "\032\004\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1" +
    "\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\025\ufff1\001" +
    "\002\000\032\004\uffee\012\uffee\013\uffee\014\uffee\015\uffee" +
    "\016\uffee\017\uffee\020\uffee\021\uffee\022\uffee\023\uffee\025" +
    "\uffee\001\002\000\004\004\065\001\002\000\032\004\uffeb" +
    "\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020" +
    "\uffeb\021\uffeb\022\uffeb\023\uffeb\025\uffeb\001\002\000\032" +
    "\004\uffe8\012\061\013\060\014\uffe8\015\uffe8\016\uffe8\017" +
    "\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\025\uffe8\001\002" +
    "\000\026\004\uffdc\014\056\015\055\016\uffdc\017\uffdc\020" +
    "\uffdc\021\uffdc\022\uffdc\023\uffdc\025\uffdc\001\002\000\022" +
    "\004\uffe3\016\045\017\050\020\047\021\046\022\uffe3\023" +
    "\uffe3\025\uffe3\001\002\000\012\004\uffe0\022\042\023\041" +
    "\025\uffe0\001\002\000\032\004\ufff5\012\ufff5\013\ufff5\014" +
    "\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5" +
    "\023\ufff5\025\ufff5\001\002\000\006\004\uffdd\025\uffdd\001" +
    "\002\000\032\004\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf" +
    "\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\025" +
    "\uffdf\001\002\000\032\004\uffde\012\uffde\013\uffde\014\uffde" +
    "\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023" +
    "\uffde\025\uffde\001\002\000\022\010\024\011\023\024\021" +
    "\030\040\033\037\034\017\035\022\036\020\001\002\000" +
    "\022\010\024\011\023\024\021\030\040\033\037\034\017" +
    "\035\022\036\020\001\002\000\006\004\uffe2\025\uffe2\001" +
    "\002\000\006\004\uffe1\025\uffe1\001\002\000\022\010\024" +
    "\011\023\024\021\030\040\033\037\034\017\035\022\036" +
    "\020\001\002\000\022\010\024\011\023\024\021\030\040" +
    "\033\037\034\017\035\022\036\020\001\002\000\022\010" +
    "\024\011\023\024\021\030\040\033\037\034\017\035\022" +
    "\036\020\001\002\000\022\010\024\011\023\024\021\030" +
    "\040\033\037\034\017\035\022\036\020\001\002\000\012" +
    "\004\uffe6\022\uffe6\023\uffe6\025\uffe6\001\002\000\012\004" +
    "\uffe5\022\uffe5\023\uffe5\025\uffe5\001\002\000\012\004\uffe4" +
    "\022\uffe4\023\uffe4\025\uffe4\001\002\000\012\004\uffe7\022" +
    "\uffe7\023\uffe7\025\uffe7\001\002\000\022\010\024\011\023" +
    "\024\021\030\040\033\037\034\017\035\022\036\020\001" +
    "\002\000\022\010\024\011\023\024\021\030\040\033\037" +
    "\034\017\035\022\036\020\001\002\000\032\004\uffea\012" +
    "\061\013\060\014\uffea\015\uffea\016\uffea\017\uffea\020\uffea" +
    "\021\uffea\022\uffea\023\uffea\025\uffea\001\002\000\022\010" +
    "\024\011\023\024\021\030\040\033\037\034\017\035\022" +
    "\036\020\001\002\000\022\010\024\011\023\024\021\030" +
    "\040\033\037\034\017\035\022\036\020\001\002\000\032" +
    "\004\uffed\012\uffed\013\uffed\014\uffed\015\uffed\016\uffed\017" +
    "\uffed\020\uffed\021\uffed\022\uffed\023\uffed\025\uffed\001\002" +
    "\000\032\004\uffec\012\uffec\013\uffec\014\uffec\015\uffec\016" +
    "\uffec\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec\025\uffec" +
    "\001\002\000\032\004\uffe9\012\061\013\060\014\uffe9\015" +
    "\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9" +
    "\025\uffe9\001\002\000\022\002\ufffc\006\ufffc\007\ufffc\026" +
    "\ufffc\027\ufffc\031\ufffc\032\ufffc\036\ufffc\001\002\000\032" +
    "\004\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0\017" +
    "\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\025\ufff0\001\002" +
    "\000\032\004\uffef\012\uffef\013\uffef\014\uffef\015\uffef\016" +
    "\uffef\017\uffef\020\uffef\021\uffef\022\uffef\023\uffef\025\uffef" +
    "\001\002\000\004\025\071\001\002\000\032\004\ufff4\012" +
    "\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4" +
    "\021\ufff4\022\ufff4\023\ufff4\025\ufff4\001\002\000\032\004" +
    "\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3" +
    "\020\ufff3\021\ufff3\022\ufff3\023\ufff3\025\ufff3\001\002\000" +
    "\032\004\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2" +
    "\017\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2\025\ufff2\001" +
    "\002\000\020\006\011\007\075\026\013\027\012\031\007" +
    "\032\006\036\014\001\002\000\022\002\ufffa\006\ufffa\007" +
    "\ufffa\026\ufffa\027\ufffa\031\ufffa\032\ufffa\036\ufffa\001\002" +
    "\000\006\004\100\005\077\001\002\000\022\010\024\011" +
    "\023\024\021\030\040\033\037\034\017\035\022\036\020" +
    "\001\002\000\022\002\ufffd\006\ufffd\007\ufffd\026\ufffd\027" +
    "\ufffd\031\ufffd\032\ufffd\036\ufffd\001\002\000\004\004\102" +
    "\001\002\000\022\002\ufffb\006\ufffb\007\ufffb\026\ufffb\027" +
    "\ufffb\031\ufffb\032\ufffb\036\ufffb\001\002\000\004\004\104" +
    "\001\002\000\022\002\ufff9\006\ufff9\007\ufff9\026\ufff9\027" +
    "\ufff9\031\ufff9\032\ufff9\036\ufff9\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\103\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\006\004\014\017\007\001\001\000\026\005\024" +
    "\006\025\007\027\010\030\011\031\012\033\013\035\014" +
    "\034\015\102\016\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\005\024\006\025\007\027\010\030\011\031\012\033\013" +
    "\035\014\034\015\026\016\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\005\024\006\025\007\027\010" +
    "\030\011\031\012\033\013\035\014\034\015\067\016\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\005" +
    "\024\006\025\007\027\010\030\011\031\012\043\014\034" +
    "\016\032\001\001\000\022\005\024\006\025\007\027\010" +
    "\030\011\031\012\042\014\034\016\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\005\024\006\025\007" +
    "\027\010\030\011\031\014\034\016\053\001\001\000\020" +
    "\005\024\006\025\007\027\010\030\011\031\014\034\016" +
    "\052\001\001\000\020\005\024\006\025\007\027\010\030" +
    "\011\031\014\034\016\051\001\001\000\020\005\024\006" +
    "\025\007\027\010\030\011\031\014\034\016\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\005\024\006\025\007\027\010\063" +
    "\014\034\001\001\000\014\005\024\006\025\007\027\010" +
    "\056\014\034\001\001\000\002\001\001\000\012\005\024" +
    "\006\025\007\062\014\034\001\001\000\012\005\024\006" +
    "\025\007\061\014\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\014\017" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\005\024\006\025\007\027\010\030\011\031\012\033\013" +
    "\035\014\034\015\100\016\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public lama.Absyn.Program pProgram() throws Exception
  {
    java_cup.runtime.Symbol res = parse();
    return (lama.Absyn.Program) res.value;
  }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
  report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
  throw new Exception("Unrecoverable Syntax Error");
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


public java_cup.runtime.ComplexSymbolFactory.Location getLeftLocation(
    java_cup.runtime.ComplexSymbolFactory.Location ... locations) {
  for (java_cup.runtime.ComplexSymbolFactory.Location l : locations) {
    if (l != null) {
      return l;
    }
  }
  return null;
}

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		lama.Absyn.Program start_val = (lama.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= ListStm 
            {
              lama.Absyn.Program RESULT =null;
		lama.Absyn.ListStm p_1 = (lama.Absyn.ListStm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new lama.Absyn.Prog(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ListStm ::= 
            {
              lama.Absyn.ListStm RESULT =null;
		 RESULT = new lama.Absyn.ListStm(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListStm",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ListStm ::= ListStm Stm 
            {
              lama.Absyn.ListStm RESULT =null;
		lama.Absyn.ListStm p_1 = (lama.Absyn.ListStm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		lama.Absyn.Stm p_2 = (lama.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListStm",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Stm ::= Type _IDENT_ _SYMB_0 
            {
              lama.Absyn.Stm RESULT =null;
		lama.Absyn.Type p_1 = (lama.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new lama.Absyn.SDecl(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Stm ::= _IDENT_ _SYMB_1 Exp _SYMB_0 
            {
              lama.Absyn.Stm RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		lama.Absyn.Exp p_3 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new lama.Absyn.SAss(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Stm ::= Type _IDENT_ _SYMB_1 Exp _SYMB_0 
            {
              lama.Absyn.Stm RESULT =null;
		lama.Absyn.Type p_1 = (lama.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		lama.Absyn.Exp p_4 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new lama.Absyn.SInit(p_1,p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Stm ::= _SYMB_2 ListStm _SYMB_3 
            {
              lama.Absyn.Stm RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		lama.Absyn.ListStm p_2 = (lama.Absyn.ListStm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new lama.Absyn.SBlock(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Stm ::= _SYMB_22 Exp _SYMB_0 
            {
              lama.Absyn.Stm RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		lama.Absyn.Exp p_2 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new lama.Absyn.SPrint(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Exp8 ::= _IDENT_ 
            {
              lama.Absyn.Exp RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new lama.Absyn.EVar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp8",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Exp8 ::= _INTEGER_ 
            {
              lama.Absyn.Exp RESULT =null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new lama.Absyn.EInt(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp8",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Exp8 ::= _DOUBLE_ 
            {
              lama.Absyn.Exp RESULT =null;
		Double p_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new lama.Absyn.EDouble(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp8",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Exp8 ::= Bool 
            {
              lama.Absyn.Exp RESULT =null;
		lama.Absyn.Bool p_1 = (lama.Absyn.Bool)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new lama.Absyn.EBool(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp8",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Exp8 ::= _SYMB_16 Exp _SYMB_17 
            {
              lama.Absyn.Exp RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		lama.Absyn.Exp p_2 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp8",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Exp7 ::= _IDENT_ _SYMB_4 
            {
              lama.Absyn.Exp RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new lama.Absyn.EPostIncr(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp7",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Exp7 ::= _IDENT_ _SYMB_5 
            {
              lama.Absyn.Exp RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new lama.Absyn.EPostDecr(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp7",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Exp7 ::= Exp8 
            {
              lama.Absyn.Exp RESULT =null;
		lama.Absyn.Exp p_1 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp7",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Exp6 ::= _SYMB_4 _IDENT_ 
            {
              lama.Absyn.Exp RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new lama.Absyn.EPreIncr(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp6",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Exp6 ::= _SYMB_5 _IDENT_ 
            {
              lama.Absyn.Exp RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new lama.Absyn.EPreDecr(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp6",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Exp6 ::= Exp7 
            {
              lama.Absyn.Exp RESULT =null;
		lama.Absyn.Exp p_1 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp6",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Exp5 ::= Exp5 _SYMB_6 Exp6 
            {
              lama.Absyn.Exp RESULT =null;
		lama.Absyn.Exp p_1 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		lama.Absyn.Exp p_3 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new lama.Absyn.EMul(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp5",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Exp5 ::= Exp5 _SYMB_7 Exp6 
            {
              lama.Absyn.Exp RESULT =null;
		lama.Absyn.Exp p_1 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		lama.Absyn.Exp p_3 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new lama.Absyn.EDiv(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp5",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Exp5 ::= Exp6 
            {
              lama.Absyn.Exp RESULT =null;
		lama.Absyn.Exp p_1 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp5",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Exp4 ::= Exp4 _SYMB_8 Exp5 
            {
              lama.Absyn.Exp RESULT =null;
		lama.Absyn.Exp p_1 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		lama.Absyn.Exp p_3 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new lama.Absyn.EAdd(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp4",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Exp4 ::= Exp4 _SYMB_9 Exp5 
            {
              lama.Absyn.Exp RESULT =null;
		lama.Absyn.Exp p_1 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		lama.Absyn.Exp p_3 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new lama.Absyn.ESub(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp4",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Exp4 ::= Exp5 
            {
              lama.Absyn.Exp RESULT =null;
		lama.Absyn.Exp p_1 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp4",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Exp2 ::= Exp3 _SYMB_10 Exp3 
            {
              lama.Absyn.Exp RESULT =null;
		lama.Absyn.Exp p_1 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		lama.Absyn.Exp p_3 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new lama.Absyn.ELess(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp2",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Exp2 ::= Exp3 _SYMB_11 Exp3 
            {
              lama.Absyn.Exp RESULT =null;
		lama.Absyn.Exp p_1 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		lama.Absyn.Exp p_3 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new lama.Absyn.EGreater(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp2",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Exp2 ::= Exp3 _SYMB_12 Exp3 
            {
              lama.Absyn.Exp RESULT =null;
		lama.Absyn.Exp p_1 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		lama.Absyn.Exp p_3 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new lama.Absyn.ELEq(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp2",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Exp2 ::= Exp3 _SYMB_13 Exp3 
            {
              lama.Absyn.Exp RESULT =null;
		lama.Absyn.Exp p_1 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		lama.Absyn.Exp p_3 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new lama.Absyn.EGEq(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp2",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Exp2 ::= Exp3 
            {
              lama.Absyn.Exp RESULT =null;
		lama.Absyn.Exp p_1 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp2",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Exp1 ::= Exp2 _SYMB_14 Exp2 
            {
              lama.Absyn.Exp RESULT =null;
		lama.Absyn.Exp p_1 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		lama.Absyn.Exp p_3 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new lama.Absyn.EEq(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp1",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Exp1 ::= Exp2 _SYMB_15 Exp2 
            {
              lama.Absyn.Exp RESULT =null;
		lama.Absyn.Exp p_1 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		lama.Absyn.Exp p_3 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new lama.Absyn.ENEq(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp1",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Exp1 ::= Exp2 
            {
              lama.Absyn.Exp RESULT =null;
		lama.Absyn.Exp p_1 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp1",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Bool ::= _SYMB_23 
            {
              lama.Absyn.Bool RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new lama.Absyn.Bool_true(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bool",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Bool ::= _SYMB_20 
            {
              lama.Absyn.Bool RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new lama.Absyn.Bool_false(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bool",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Exp ::= Exp1 
            {
              lama.Absyn.Exp RESULT =null;
		lama.Absyn.Exp p_1 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Exp3 ::= Exp4 
            {
              lama.Absyn.Exp RESULT =null;
		lama.Absyn.Exp p_1 = (lama.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp3",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Type ::= _SYMB_21 
            {
              lama.Absyn.Type RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new lama.Absyn.TInt(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Type ::= _SYMB_19 
            {
              lama.Absyn.Type RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new lama.Absyn.TDouble(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Type ::= _SYMB_18 
            {
              lama.Absyn.Type RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new lama.Absyn.TBool(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",13, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
